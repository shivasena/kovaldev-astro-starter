---
export interface Props {
  variant?: "solid" | "outline" | "ghost" | "link";
  size?: "sm" | "md" | "lg";
  disabled?: boolean;
  loading?: boolean;
  fullWidth?: boolean;
  type?: "button" | "submit" | "reset";
  class?: string;
  id?: string;
  "aria-label"?: string;
  "aria-describedby"?: string;
  "aria-expanded"?: "true" | "false";
  "aria-pressed"?: "true" | "false";
  "aria-haspopup"?:
    | "true"
    | "false"
    | "menu"
    | "listbox"
    | "tree"
    | "grid"
    | "dialog";
}

const {
  variant = "solid",
  size = "md",
  disabled = false,
  loading = false,
  fullWidth = false,
  type = "button",
  class: className = "",
  id,
  "aria-label": ariaLabel,
  "aria-describedby": ariaDescribedby,
  "aria-expanded": ariaExpanded,
  "aria-pressed": ariaPressed,
  "aria-haspopup": ariaHaspopup,
} = Astro.props;

// Base classes
const baseClasses = [
  "inline-flex items-center justify-center gap-2",
  "font-medium transition-all duration-200",
  "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-secondary focus-visible:ring-offset-2",
  "disabled:opacity-50 disabled:cursor-not-allowed disabled:pointer-events-none",
  "active:scale-[0.98]",
];

// Size classes with minimal corners and 2:1 proportion padding
const sizeClasses = {
  sm: "py-3 px-6 text-sm rounded-sm",
  md: "py-4 px-8 text-base rounded-sm",
  lg: "py-5 px-10 text-lg rounded-sm",
};

// Variant classes
const variantClasses = {
  solid: [
    "bg-secondary text-light",
    "hover:bg-secondary/90",
    "active:bg-secondary/80",
    "focus-visible:ring-secondary/50",
  ],
  outline: [
    "border-2 border-secondary bg-transparent text-secondary",
    "hover:bg-secondary hover:text-light",
    "active:bg-secondary/90",
    "focus-visible:ring-secondary/50",
  ],
  ghost: [
    "bg-transparent text-secondary",
    "hover:bg-secondary/10",
    "active:bg-secondary/20",
    "focus-visible:ring-secondary/50",
  ],
  link: [
    "bg-transparent text-secondary underline underline-offset-4",
    "hover:no-underline",
    "active:text-secondary/80",
    "focus-visible:ring-secondary/50",
  ],
};

// Width classes
const widthClasses = fullWidth ? "w-full" : "";

// Combine all classes
const buttonClasses = [
  ...baseClasses,
  sizeClasses[size],
  ...variantClasses[variant],
  widthClasses,
  className,
]
  .filter(Boolean)
  .join(" ");

// Loading spinner SVG string
const loadingSpinnerSvg = `<svg
  class="animate-spin size-4"
  xmlns="http://www.w3.org/2000/svg"
  fill="none"
  viewBox="0 0 24 24"
  aria-hidden="true"
>
  <circle
    class="opacity-25"
    cx="12"
    cy="12"
    r="10"
    stroke="currentColor"
    stroke-width="4"
  />
  <path
    class="opacity-75"
    fill="currentColor"
    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
  />
</svg>`;
---

<button
  type={type}
  disabled={disabled || loading}
  class={buttonClasses}
  id={id}
  aria-label={ariaLabel}
  aria-describedby={ariaDescribedby}
  aria-expanded={ariaExpanded}
  aria-pressed={ariaPressed}
  aria-haspopup={ariaHaspopup}
>
  {loading && <Fragment set:html={loadingSpinnerSvg} />}
  <slot />
</button>
